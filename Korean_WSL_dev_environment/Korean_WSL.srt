1
00:00:01,792 --> 00:00:07,936
안녕하세요 윈도우 10에 리눅스지원 3중주 맛보기. Docker, WSL 그리고

2
00:00:08,192 --> 00:00:14,336
VS Code 라는 주제로 오늘 발표를 맡은 한국 WSL 사용자그룹의 남정현 이라고 합니다.

3
00:00:15,360 --> 00:00:21,504
오늘 소개해 드리려고 하는 내용은 대략 이런 내용 들인데요 우선 WSL에 대해서 그리고

4
00:00:21,760 --> 00:00:23,552
최근에 나온 버전2에 대해서

5
00:00:24,064 --> 00:00:26,112
자세히 이야기를 드리려고 하고요

6
00:00:26,368 --> 00:00:27,136
그리고

7
00:00:27,648 --> 00:00:33,792
Wsl 아니 리눅스를 기반으로 하고 있기 때문이기도 하고 굉장히

8
00:00:34,048 --> 00:00:36,352
윤한 부분을 많이 갖고 있는데

9
00:00:36,608 --> 00:00:42,752
오늘은 그 중에서도 컨테이너를 이용을 해서 wsl 만드는 방법

10
00:00:43,008 --> 00:00:45,312
에서 영어를 켜 보라고

11
00:00:46,336 --> 00:00:52,480
그리고 이렇게 만들어진 리눅스 배포판만이 아니라 도커 컨테이너에 직접

12
00:00:52,736 --> 00:00:56,064
연결할 수 있는 vs 코드 리모트 기능과 더불어서

13
00:00:56,320 --> 00:01:02,464
최근에 마이크로소프트 Dev Container라는 이름으로 GitHub Codespace 애도 연동할 수 있도록

14
00:01:02,720 --> 00:01:07,840
컨테이너 이미지를 개발도구가 포함을 해서 제공 하고 있는데요 Dev Container에 대해서도

15
00:01:08,096 --> 00:01:09,376
살펴 보도록 하겠습니다.

16
00:01:11,168 --> 00:01:17,312
WSL에 대해서 이야기를 좀 드리면, wsl은 윈도우 10 1주년 업데이트 때

17
00:01:17,568 --> 00:01:18,848
처음 소개가 된 기술이고

18
00:01:19,104 --> 00:01:24,736
사용자 모드 리눅스 프로그램을 윈도우에서도 실행할 수 있게 만들어 주는 것이 특징입니다

19
00:01:25,248 --> 00:01:31,392
소프트웨어 개발 엔지니어들을 위한. 특히 DevOps Engineer들을 위한 편의기능 지원할 수 있도록

20
00:01:31,648 --> 00:01:37,792
개발이 되었고요, 그런대 점점 시간이 지나면서 모든 소프트웨어 개발 자들에게 유용한 도구로

21
00:01:38,048 --> 00:01:39,840
개선 되고 기능이 확장 되고 있습니다.

22
00:01:41,120 --> 00:01:44,448
우분투 리눅스 배포판으로 많이 사용을 하고 있고요

23
00:01:44,704 --> 00:01:48,288
최근에는 wsl V2를 사용하는 사람이 점점 늘어나고 있어

24
00:01:49,824 --> 00:01:53,408
그렇다면 WSL V1에서 왜 V2 이동하는지

25
00:01:53,664 --> 00:01:56,224
이유를 좀 알아두면 좋을 거 같아요

26
00:01:56,736 --> 00:02:02,880
기본적으로 wsl은 커널 커스터마이징 폭은 제한되거나 넓지 않습니다.

27
00:02:03,136 --> 00:02:04,160
그런데 그 중에서도 WSL V1은

28
00:02:04,672 --> 00:02:10,816
윈도우가 리눅스 시스템 콜을 처리할 수 있게 해주는 번역 드라이버가 핵심이 됩니다.

29
00:02:11,072 --> 00:02:13,888
그런데 이 드리이버는 저는 실제 리눅스 커널의 흉내내는 모조품이고

30
00:02:14,144 --> 00:02:16,960
사실상 실제 리눅스 커널과는 다릅니다 그래서

31
00:02:17,216 --> 00:02:20,800
모든 처리과정의 윈도우 커널의 협조가 필요하기 때문에

32
00:02:21,056 --> 00:02:27,200
WSL V1을 가지고서 실제 리눅스 어떤 기능을 만들어 낸다는 것은

33
00:02:27,456 --> 00:02:29,248
안 되는 것과 다름이 없는 일이고요

34
00:02:29,504 --> 00:02:35,648
필연적인 기능상의 한계 그리고 개발 과정에서 한계가 명확히 때문에

35
00:02:35,904 --> 00:02:40,512
점점 더 많은 사람들이 요구 사항을 유연하게 대처하고 받아들일 수 있도록

36
00:02:40,768 --> 00:02:46,912
아예 정식 리눅스 커널을 그대로 사용하도록 개발한 WSL V2를 새로 릴리즈 하게 되었습니다

37
00:02:47,936 --> 00:02:49,728
V2의 경우에는

38
00:02:49,984 --> 00:02:56,128
내부적으로는 가상화 기술을 사용하도록 디자인이 되어있기 때문에요, 마이크로소프트 윈도우와

39
00:02:56,384 --> 00:03:02,528
리눅스 매끄러운 연동에 집중할 수 있으면 되었고, 사실상 윈도우 커널의 협조가 필요하지 않기 때문에,

40
00:03:02,784 --> 00:03:08,928
모든 IO 처리가 리눅스 커널 선에서 모두 완료 되기 때문에,

41
00:03:09,184 --> 00:03:13,536
성능에 제약 사항이 있거나 느려지는 부분이 전혀 없다는 것이 특징이 되겠구요.

42
00:03:14,304 --> 00:03:15,072
비서

43
00:03:15,328 --> 00:03:20,960
구체적으로 그림을 살펴보면 WSL V1의 경우에는 방금 말씀드렸다 싶이

44
00:03:21,216 --> 00:03:25,056
윈도우 NT 커널과 리눅스 유저랜드 영역 사이를

45
00:03:25,312 --> 00:03:31,456
번역해 주는 자체 드라이버가 중앙 계층으로 껴있어서, 가상화 기술이 필요 없다는 장점이 있지만,

46
00:03:31,712 --> 00:03:37,856
모든 I/O 작업을 NT 커널을 거처야만 했기 때문에 굉장히 느린 I/O 성능을 가질 수 밖에 없는

47
00:03:38,112 --> 00:03:39,648
한계가 있었는데 반해서,

48
00:03:40,416 --> 00:03:42,464
wsl v2 경우에는

49
00:03:42,720 --> 00:03:48,864
경량 유틸리티 vm 사용을 해서 아예 그 별도의 분리된 공간을 만들어서

50
00:03:49,120 --> 00:03:50,400
호스팅을 합니다

51
00:03:50,656 --> 00:03:52,704
유저랜드 영역 여러 배포판들이 있죠

52
00:03:52,960 --> 00:03:55,008
Ubuntu 나

53
00:03:55,520 --> 00:03:57,824
알파인이나 여러 배포판들을

54
00:03:58,080 --> 00:04:04,224
하나의 유틸리티VM 안에 모두 로딩을 하도록 하고, 이것을 중간에서 처리할 수 있는

55
00:04:04,480 --> 00:04:07,808
리눅스 커널이 존재를 해서 리눅스 커널과

56
00:04:08,064 --> 00:04:14,208
윈도우 NT 터널이 독립적으로 움직일 수 있도록 하고 하이퍼바이저의 제어를 받아서

57
00:04:14,464 --> 00:04:16,256
중간 관리를 받도록

58
00:04:16,512 --> 00:04:17,280
운영이 됩니다

59
00:04:19,583 --> 00:04:25,727
그래서 WSL V2와 하이퍼-V는 언뜻 보기에는 가상화 기술을 사용하기

60
00:04:25,983 --> 00:04:28,287
때문에 비슷해 보이는 부분도 있는데

61
00:04:28,543 --> 00:04:34,687
실제로 하이퍼-V의 경우에는 리눅스커널의 가상 컴퓨터 전체를 직접 관리하도록 되어있기 때문에

62
00:04:34,943 --> 00:04:40,319
시스템에서 CPU나 메모리, 디스크 등을 일정 부분 따로 할당을 받습니다

63
00:04:40,831 --> 00:04:46,975
그렇기 때문에 시스템을 일부 관리를 하고 배포판 자체가 하나의 운영체제를 나타내는 반면에,

64
00:04:47,231 --> 00:04:53,375
WSL V2의 경우에는 마이크로소프트가 수정한 커널을 탑재한 시스템 배포판을 불러들이도록 되어 있습니다.

65
00:04:53,631 --> 00:04:54,143
그래서

66
00:04:55,423 --> 00:05:01,567
윈도우 커널의 요청에 따라서 리눅스 시스템을 동적으로 조절 할 수 있도록 되어 있고,

67
00:05:01,823 --> 00:05:03,359
또 앞서 그림에서 보여 드렸다 싶이

68
00:05:03,615 --> 00:05:09,759
WSL이 만든 VM영역 안에 여러 유저랜드 영역들이 올라가도록 디자인 되어 있습니다.

69
00:05:13,599 --> 00:05:19,743
그래서 "wsl 배포판을 내 마음대로 만든다"를 주제로 오늘 발표를 좀 준비를 해 봤는데요.

70
00:05:19,999 --> 00:05:26,143
WSL은 사용자 영역 배포판을 rootfs 이미지로 로드할 수 있도록

71
00:05:26,399 --> 00:05:27,679
백업과 복원 기능을 제공하고 있습니다

72
00:05:28,959 --> 00:05:30,751
그런데 이 특징을 활용하시면

73
00:05:31,007 --> 00:05:37,151
Docker 컨테이너를 WSL Distro로 변환해서 로딩하거나

74
00:05:37,407 --> 00:05:41,247
반대로 WSL Distro를 Docker 이미지로 변환해서 로딩 하는 기능을 모두 사용하실 수가 있습니다.

75
00:05:42,271 --> 00:05:43,039
그래서

76
00:05:43,551 --> 00:05:47,391
docker container export -o 라고 하는 명령어를 써서 변환이 가능한데요

77
00:05:47,647 --> 00:05:53,791
이렇게 만들어진 파일은 Tarball Archive 파일로 만들어집니다.

78
00:05:54,047 --> 00:05:55,583
그래서 Tarball 이미지를 WSL에서 Import 를 하고

79
00:05:55,839 --> 00:05:58,655
리눅스 사용자 등록한 후, wsl에서

80
00:05:58,911 --> 00:06:04,287
해당 배포판의 기본 UID를 어떤 것으로 할지, 레지스트리 상에서 설정만 해 주면

81
00:06:04,543 --> 00:06:10,687
간단하게 Import해서 나만의 리눅스 배포판을 간단하게 개발에서 만들 수 있는 그런 기능을 사용하실 수 있습니다.

82
00:06:11,711 --> 00:06:15,807
역으로 WSL 이미지를 Docker 이미지로 Imort 할 때

83
00:06:16,319 --> 00:06:19,391
크기가 일정 부분 제약이 있을 수는 있지만

84
00:06:20,159 --> 00:06:21,439
일정은 크게 안에

85
00:06:21,695 --> 00:06:23,743
대역 안에 들어오면 보통

86
00:06:24,511 --> 00:06:28,607
4GB ~ 6GB 정도 사이즈의 이미지를 만들 수 있다고 하면

87
00:06:28,863 --> 00:06:30,655
배포판 이미지를

88
00:06:30,911 --> 00:06:33,727
Docker 이미지로 루트 이미지로 변환을 해서

89
00:06:33,983 --> 00:06:36,543
커스터마이징 된 그런 이미지를 만드는 것도 가능합니다.

90
00:06:40,895 --> 00:06:47,039
그래서 Docker 컨테이너를 우선 wsl Distro로 변환하는 방법에 대해서,

91
00:06:47,295 --> 00:06:48,319
간단하게 Demo 를 좀 살펴보고,

92
00:06:48,575 --> 00:06:49,855
진행하도록 하겠습니다.

93
00:06:51,647 --> 00:06:57,791
Docker 이미지를 WSL 배포판으로 Import하는 과정을 한번 살펴 보도록

94
00:06:58,047 --> 00:06:58,559
하겠습니다.

95
00:06:59,071 --> 00:07:04,191
화면 오른쪽에는 제가 진행에 편의를 위해서,

96
00:07:04,959 --> 00:07:09,567
따로 Nano 에디터 에다가 제가 실행을 내용을 메모 해 둔 것이고,

97
00:07:09,823 --> 00:07:11,871
이대로 한번 실행을 해 보도록 하겠습니다

98
00:07:12,639 --> 00:07:18,783
왼쪽은 Windows PowerShell 화면이 있고요, Docker는

99
00:07:19,039 --> 00:07:20,319
화면 아래에 보시면

100
00:07:20,831 --> 00:07:22,367
떠 있는 것을 보실 수 있습니다.

101
00:07:34,143 --> 00:07:34,911
그러면

102
00:07:35,167 --> 00:07:37,727
이미지를 다운로드를 할 것 이고요.

103
00:07:38,751 --> 00:07:41,823
우선 컨테이너로 최소 한 번 이상을 실행해 시켜 줘야

104
00:07:42,079 --> 00:07:45,663
변환이 가능합니다

105
00:07:46,175 --> 00:07:50,011
편의상 myaloine 이라고 이름을 붙이고요,

106
00:07:50,783 --> 00:07:57,059
alpine latest 이미지에서 기본 Shell 을 실행 하도록 하겠습니다.

107
00:08:03,071 --> 00:08:06,399
그 다음에, 컨테이너가 다른 일을 하는 것이 없기 때문에

108
00:08:06,911 --> 00:08:07,679
빠져나오시게 되는데요

109
00:08:07,935 --> 00:08:11,263
이 컨테이너를 이미지로 내보내도록 하겠습니다.

110
00:08:30,207 --> 00:08:35,839
사이즈가 작기 때문에 금방 내보내기가 가능하고요, 이제 확인해 보겠습니다.

111
00:08:38,655 --> 00:08:40,191
이것을 WSL로 변환해 보겠습니다.

112
00:08:46,847 --> 00:08:48,895
myalpine 이라는 이름의

113
00:08:49,151 --> 00:08:55,295
설치위치는 미리 만들어진 디렉터리로 지정 해 주시면 되겠습니다. 그 다음에,

114
00:08:58,623 --> 00:09:04,511
방금 만들었던 Tarball Archive 파일을 지정하고 WSL V2 로 로딩합니다.

115
00:09:07,583 --> 00:09:12,703
잘 로딩이 되었는지 살펴보면요,

116
00:09:14,239 --> 00:09:16,263
myalpine 이라고 확인할 수 있고,

117
00:09:17,823 --> 00:09:22,431
실행을 한번 해보겠습니다

118
00:09:23,199 --> 00:09:26,271
실행이 되고 있고

119
00:09:30,111 --> 00:09:34,975
Alpine Linux가 정상적으로 wsl로 변환 된것을 확인할 수 있습니다.

120
00:09:35,487 --> 00:09:41,631
이제 WSL 배포판을 지워보도록 하겠습니다.

121
00:09:41,887 --> 00:09:46,751
지울 때는 --unregister 명령을 사용하시면 되고요.

122
00:09:52,895 --> 00:09:55,711
잘 지워진 것을 확인할 수 있습니다.

123
00:09:58,015 --> 00:10:01,343
방금 전에 wsl 디스트로를

124
00:10:01,599 --> 00:10:07,231
Docker 이미지로 가지고 오는 방법에 대해서 말씀드렸는데요, 이번에는

125
00:10:07,487 --> 00:10:10,815
반대 방향으로 진행하는 방법을 살펴 보도록 하겠습니다.

126
00:10:12,607 --> 00:10:14,399
이번에는 반대로

127
00:10:14,911 --> 00:10:20,799
Wsl 배포판을 도커 이미지로 변환해서 로딩하는 방법을 시험 해 보도록 하겠습니다.

128
00:10:21,567 --> 00:10:27,711
제가 미리 로딩해 두었던 우분투 18.04 WSL배포판을

129
00:10:28,223 --> 00:10:29,503
도커 이미지로

130
00:10:31,039 --> 00:10:37,183
--export 스위치를 써서 Ubuntu 18.04 를 Tarball Archive 로 변환하겠습니다.

131
00:10:46,655 --> 00:10:48,447
변환이 모두 잘 완료가 되었구요.

132
00:10:48,703 --> 00:10:52,799
파일을 한번 확인해 보겠습니다

133
00:10:54,335 --> 00:11:00,223
이것을 Docker 이미지로 가지고 와 보겠습니다.

134
00:11:00,479 --> 00:11:03,807
myubuntu:latest Docker 이미지를 가져와 보겠습니다.

135
00:11:08,927 --> 00:11:12,511
이미지 로딩이 완료가 되었고요

136
00:11:17,119 --> 00:11:19,423
myubuntu:latest

137
00:11:19,679 --> 00:11:21,471
로딩이 되었구요

138
00:11:24,799 --> 00:11:28,639
한번 실행해 보겠습니다.

139
00:11:28,895 --> 00:11:35,039
myubuntu 라는 이름으로

140
00:11:40,415 --> 00:11:42,719
로컨테이너가 root 계정으로

141
00:11:43,231 --> 00:11:44,255
실행 될 수가 있구요.

142
00:11:46,815 --> 00:11:50,143
우분투 이미지가 맞는지 한번 더 확인해 보겠습니다.

143
00:11:51,167 --> 00:11:52,703
우분투 18.04 로딩 되었습니다.

144
00:12:00,383 --> 00:12:06,527
방금 뛰었던 컨테이너 이미지를 지워 보도록 하겠습니다

145
00:12:07,295 --> 00:12:12,159
이미지 사이즈도 크기 때문에

146
00:12:12,415 --> 00:12:14,975
항상 공간 확보를 위해서 지워주겠습니다.

147
00:12:19,839 --> 00:12:25,983
Visual Studio Code Dev Container 라는 이름의 프로젝트가 최근에 마이크로소프트에서 오픈소스로 또 공개가 되었는데요

148
00:12:27,007 --> 00:12:33,151
여러분들께서 많이 들어보셨을 텐데 GitHub Codespace 라고 하는 서비스가

149
00:12:33,407 --> 00:12:35,199
Azure Codespace 에서 통합이 돼서

150
00:12:35,455 --> 00:12:41,599
가상 개발환경을 GitHub Repository와 연계해서 쓸 수 있는 기능을 많이 들어보셨을 텐데요.

151
00:12:42,623 --> 00:12:44,927
이 가상환경에서

152
00:12:45,183 --> 00:12:51,327
각종 개발도구나 빌드 환경의 기본 토대가 되는 컨테이너 이미지가 Dev Container 입니다.

153
00:12:51,839 --> 00:12:56,447
그래서 주요 언어별 개발도구가 미리 포함이 되어 있는 개발용 컨테이너구요.

154
00:12:56,959 --> 00:13:03,103
Node.js, Python, Golang, Java, .Net, Rust, C++, PHP

155
00:13:03,359 --> 00:13:07,711
그리고 이 모든 언어를 한꺼번에 포함하는 유니버설이 이미지까지 지원이 됩니다.

156
00:13:08,223 --> 00:13:14,367
이런 이미지들을 사용을 하시게 되면 CI/CD 파이프라인에서 빠르게 이미지나

157
00:13:14,623 --> 00:13:20,767
개발 환경을 수동으로 설치 하는 일 없이 편하게 구현하실 수 있을뿐만이 아니라,

158
00:13:21,023 --> 00:13:24,095
리눅스 기반 환경 구축에 드는 시간을 크게 단축시킬 수도 있습니다.

159
00:13:24,863 --> 00:13:29,727
무엇보다도 좋은 것은 비주얼 스튜디오 코드 와도 연동이 잘된다는 부분인데요.

160
00:13:31,007 --> 00:13:36,639
이어지는 Demo에서 비주얼 스튜디오 코드에 리모트 컨테이너 기능을 이용을 해서

161
00:13:36,895 --> 00:13:43,039
시스템에 설치가 되어 있는 Docker Desktop과 연계해서 리모트 컨테이너로

162
00:13:43,295 --> 00:13:44,063
개발 환경을

163
00:13:44,319 --> 00:13:48,671
어떻게 구축해서 쓸 수 있는지, 잠시 Demo를 통해서 드리도록 하겠습니다

164
00:13:50,463 --> 00:13:52,767
Visual Studio Code에서

165
00:13:54,047 --> 00:13:59,679
Dev Container를 체험해보면서 로딩 할 수 있는 기능을 좀 살펴볼까 하는데요

166
00:14:01,727 --> 00:14:04,031
커맨드 팔레트로 이동해서,

167
00:14:04,287 --> 00:14:08,127
Remote Containers 라고 검색을 하시면

168
00:14:08,383 --> 00:14:10,943
Try a sample 이라는 메뉴가 나옵니다.

169
00:14:12,479 --> 00:14:14,271
이것을 클릭하시면,

170
00:14:14,527 --> 00:14:15,807
해당되는

171
00:14:16,063 --> 00:14:17,343
언어 별로

172
00:14:17,855 --> 00:14:19,647
사용 할 수 있는 컨테이너들이 모두 나오구요,

173
00:14:21,439 --> 00:14:23,487
.Net Core를 선택해 보겠습니다.

174
00:14:28,095 --> 00:14:28,863
그러면

175
00:14:29,375 --> 00:14:35,263
시스템에 설치가 되어 있는 Docker Engine을 이용을 해서 리모트 컨테이너를 풀링을 하게 되고요

176
00:14:37,055 --> 00:14:38,079
보시는 것처럼

177
00:14:38,591 --> 00:14:40,383
Docker 이미지를 풀링을 하고

178
00:14:40,639 --> 00:14:42,431
Docker Image 빌드 과정을 거치게 됩니다.

179
00:14:44,991 --> 00:14:51,135
처음 한 번만 이 과정을 거치기 때문에, 처음에는 속도가 느리지만, 한번 이미지를 캐싱을 하고 나면,

180
00:14:51,647 --> 00:14:52,927
그 다음부턴 빠르게 진행할 수 있습니다.

181
00:15:12,383 --> 00:15:16,991
환경을 로딩하는 중에는 이와 같이 방화벽에서 경고가 나타나기도 하는데요.

182
00:15:17,247 --> 00:15:19,807
액세스 허용 버튼을 눌러주면

183
00:15:20,063 --> 00:15:20,831
이대로 진행이 됩니다.

184
00:15:30,303 --> 00:15:31,583
이제

185
00:15:31,839 --> 00:15:35,935
필요한 초기 프로그램과 환경들이 모두 로딩이 되었고요.

186
00:15:36,447 --> 00:15:42,591
지금 여기에 있는 모든 파일들은 별도로 분리되어 있는

187
00:15:42,847 --> 00:15:46,431
컨테이너 환경 위해서 실행이 되고, 디버깅을 할 수 있도록

188
00:15:46,687 --> 00:15:48,223
구성이 되어 있습니다

189
00:15:48,991 --> 00:15:51,551
그리고 Dev Container의 경우에는

190
00:15:51,807 --> 00:15:56,415
이와 같이 .devcontainer에 devcontainer.json 파일을 보면

191
00:15:56,671 --> 00:16:02,047
사용하고자 하는 개발환경에 대해서 구체적인 환경 설정을

192
00:16:02,303 --> 00:16:03,071
이곳에 모두 넣어 두실 수 있습니다.

193
00:16:03,327 --> 00:16:05,631
자세한 내용은 여기서 모두 다루지는 않을건데요,

194
00:16:05,887 --> 00:16:10,495
devcontainer.json 파일을 원하는 대로 편집을 하실 수도 있고

195
00:16:10,751 --> 00:16:14,847
도커 파일을 원하는 대로 커스터마이징을 해서

196
00:16:15,615 --> 00:16:16,895
빌드 환경을

197
00:16:17,151 --> 00:16:20,991
만들 때 필요한 커스터마이징 요구사항들을 모두 넣어둘 수 있습니다.

198
00:16:22,783 --> 00:16:24,831
그러면

199
00:16:25,599 --> 00:16:27,647
한번 실행을 해 보도록 하겠습니다

200
00:17:08,095 --> 00:17:09,375
브레이크 포인트

201
00:17:10,399 --> 00:17:13,471
브레이크 포인트가 잘 걸리는지도 한번 확인을 해 보겠습니다.

202
00:17:14,495 --> 00:17:17,055
브레이크 포인트를 걸고

203
00:17:21,151 --> 00:17:22,687
타이틀을 실행을 하면

204
00:17:22,943 --> 00:17:26,015
통합 디버깅 환경도 쓰실 수 있는것을 보실 수 있습니다.

205
00:17:32,415 --> 00:17:38,559
앞에서 살펴보셔던 Docker 컨테이너로 개발 환경을 구분 하는 것은 나름대로의 장점이 있는데요

206
00:17:38,815 --> 00:17:44,959
그런데 나는 Docker 컨테이너를 이용하는 것 보다 좀 더 영속적인 컨테이너 환경을 유지하고 싶다

207
00:17:45,471 --> 00:17:49,055
영속적인 개발환경을 유지하고 싶어 하시는 분들이 계실 텐데,

208
00:17:49,311 --> 00:17:50,847
이런 분들을 위해서

209
00:17:51,103 --> 00:17:52,895
리모트 wsl이라고

210
00:17:53,151 --> 00:17:54,431
이용을 하시면,

211
00:17:54,687 --> 00:18:00,831
Docker 컨테이너 연결하는 방법 동일하게, WSL을 대상으로도 리모트 디버깅과

212
00:18:01,087 --> 00:18:02,879
빌드 환경을 그대로 이용하실 수 있습니다.

213
00:18:03,391 --> 00:18:09,535
그런데 앞서 설명 드렸던 것처럼, Docker 컨테이너를 루트 FS 이미지를 이용을 해서

214
00:18:09,791 --> 00:18:15,935
WSL로 Import 할 수 있다고 말씀해 드렸는데요, 이 기능을 활용을 하시면 마찬가지로,

215
00:18:16,191 --> 00:18:18,239
개발환경 구축에 드는 시간을 줄이면서

216
00:18:18,751 --> 00:18:20,543
좀 더 빠르고 안전한

217
00:18:21,055 --> 00:18:26,943
영속성 있는 WSL 기반의 개발 환경을 VS Code와 함께 연동해서

218
00:18:27,455 --> 00:18:28,991
하실수가 있습니다

219
00:18:30,015 --> 00:18:31,039
그래서

220
00:18:31,295 --> 00:18:35,647
VS Code에 리모트 WSL 기능을 활용을 해서

221
00:18:35,903 --> 00:18:38,207
개발 환경을 구축하고

222
00:18:38,719 --> 00:18:41,087
연결하는 방법에 대해 Demo를 보여드리겠습니다.

223
00:18:48,703 --> 00:18:54,847
앞에서 살펴본 Dev 컨테이너를 이용을 해서 이번엔 Dev 컨테이너를

224
00:18:55,103 --> 00:18:56,639
WSL 배포판으로 변경을 해 보고

225
00:18:56,895 --> 00:19:01,759
여기서 VS Code 리모트 WSL 기능을 시험해 보도록 하겠습니다.

226
00:19:04,831 --> 00:19:10,975
이미지를 Docker Hub 에서 가지고 오도록 하겠습니다

227
00:19:22,751 --> 00:19:23,519
이미지를

228
00:19:23,775 --> 00:19:24,799
받고 있구요.

229
00:19:27,615 --> 00:19:32,479
당연히 이 안에는 C++ 코드빌드을 위한 모든 툴들이 한꺼번에 들어 있습니다.

230
00:19:32,991 --> 00:19:39,039
이미지 사이즈가 다른 Docker 이미지 보다는 큰 것을 확인 하실 수 있구요.

231
00:19:58,335 --> 00:20:04,383
이미지가 모두 로딩이 되었습니다. 이제 이것을 컨테이너로 한번 실행 시켜줘야 합니다.

232
00:20:10,879 --> 00:20:17,023
이렇게 명령어를 실행하겠습니다.

233
00:20:24,959 --> 00:20:27,263
mycpp 컨테이너가 잘 만들어진것을 확인 할 수 있구요.

234
00:20:30,079 --> 00:20:36,223
이제 이것을 이미지로 내보내겠습니다.

235
00:20:46,207 --> 00:20:50,303
이미지가 잘 만들어졌는지 확인을 해 보면

236
00:20:50,559 --> 00:20:52,095
만들어져 있구요.

237
00:20:53,119 --> 00:20:59,263
이번엔 이것을 wsl로 가지고 와 보겠습니다.

238
00:21:00,287 --> 00:21:06,431
디렉터리를 만들구요.

239
00:21:09,503 --> 00:21:15,647
아까 만들었던 Tarball Archive 이미지를 WSL2로 복사하겠습니다.

240
00:21:20,256 --> 00:21:23,328
잘 Import 되었는지 보면,

241
00:21:25,376 --> 00:21:29,984
mycpp 가 들어가 있구요,

242
00:21:31,520 --> 00:21:34,080
컨테이너가 WSL 이미지로

243
00:21:36,640 --> 00:21:42,176
C++ 컴파일러와 Make 가 설치되어 있는것을 보실 수 있구요.

244
00:21:44,064 --> 00:21:49,184
이렇게 로딩한 wsl 배포판을 vs 코드에서 여는 방법을 알아보겠습니다.

245
00:21:50,208 --> 00:21:56,096
여는 방법은 2가지가 있는데, 해 보실 수 있는 것은 
커맨드라인에서 code라고 하는 명령을 실행하는 겁니다.

246
00:21:58,912 --> 00:22:01,984
code의 경우에는 배포판에 상황에 따라서

247
00:22:02,240 --> 00:22:06,708
한번에 윈도우에 VS Code 까지 
연결이 되지 않을 수도 있는데요,

248
00:22:06,720 --> 00:22:12,864
이럴 경우에는, 비주얼 스튜디오 코드를 따로 여셔서,

249
00:22:13,760 --> 00:22:19,648
Wsl이 설치가 되어 있다면 자동으로 플러그인이 설치가 될 텐데요

250
00:22:21,952 --> 00:22:23,232
그렇지 않다면,

251
00:22:24,000 --> 00:22:30,144
Extension 페이지에 가셔서 WSL이라고 입력을 하면,
리모트 wsl을 수동설치 하실 수 있습니다.

252
00:22:31,936 --> 00:22:38,080
설치가 이미 되어 있으시다면, 또 마찬가지로 리모트 WSL에

253
00:22:39,104 --> 00:22:42,432
New window using distro 명령어 사용을 하여서,

254
00:22:42,688 --> 00:22:44,224
저희가 등록했던 것으로

255
00:22:45,760 --> 00:22:47,552
실행을 해 보실수 있구요.

256
00:22:51,904 --> 00:22:57,024
Wsl 내부에 비쥬얼스튜디오코드 프록시서버를 설치하는 과정을 거치게 됩니다.

257
00:22:57,280 --> 00:23:00,864
자동으로 터미널이 연결된것을 확인하실 수 있구요

258
00:23:01,888 --> 00:23:03,680
이 안에서

259
00:23:03,936 --> 00:23:05,216
내가 원하는

260
00:23:06,240 --> 00:23:09,824
파일이나 폴더를 사용하실 수도 있고,

261
00:23:10,080 --> 00:23:13,152
혹은 로컬 표시 기능을 이용해서

262
00:23:14,432 --> 00:23:20,576
Wsl 공유 폴더에 접근해서 윈도우 파일시스템에

263
00:23:20,832 --> 00:23:22,368
리눅스 파일 시스템을

264
00:23:23,392 --> 00:23:24,672
자유롭게 제어할 수 있습니다.

265
00:23:27,232 --> 00:23:30,048
사용하지 않을 때는 "원격 연결 닫기"를 하면

266
00:23:36,704 --> 00:23:42,848
지금까지 윈도우 10에서 리눅스 개발환경을 구축하는 3가지 방법

267
00:23:43,104 --> 00:23:47,968
서로 다르지만 자연스럽게 연결될 수도 있는 방법들에 대해서 살펴보았습니다

268
00:23:48,736 --> 00:23:54,368
WSL 그 자체에 대해서 조금 더 궁금하다고 하시는 분들께서는

269
00:23:54,624 --> 00:23:58,720
한국 wsl 사용자그룹 홈페이지

270
00:23:58,976 --> 00:24:04,864
wslhub.com 방문을 하셔서 커뮤니티나 
아니면 여러 가지 튜토리얼들을 더 살펴보실 수 있습니다.

271
00:24:05,376 --> 00:24:09,472
그 외에도 몇 가지 오픈 소스 프로젝트 를 진행 을 하고 있으니깐요

272
00:24:09,728 --> 00:24:14,080
컨트리뷰션에 관심 있으신 분들 많이 참여해 주시면 감사하겠습니다

273
00:24:15,104 --> 00:24:18,432
제가 오늘 준비한 내용은 여기까지고요

274
00:24:18,688 --> 00:24:22,528
모두들 힘들게 코로나 시국을 같이 보내고 있는 중인데

275
00:24:23,040 --> 00:24:24,576
아픈 곳 없이

276
00:24:25,088 --> 00:24:28,672
코로나가 모두 종식이 될 때 까지

277
00:24:29,184 --> 00:24:31,744
건강하게 보내셨으면 좋겠습니다.

278
00:24:33,280 --> 00:24:34,048
감사합니다

